{"version":3,"sources":["store/index.ts","api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["defaultState","selectedUserId","todos","GET_TODOS","SET_SELECTED_USERID","getTodosSelector","state","getSelectUserIdSelector","setSelectUserId","id","type","payload","store","createStore","action","composeWithDevTools","mateApi","GetEndpoint","name","a","fetch","responce","json","TodoList","useSelector","selectUsId","dispatch","useDispatch","useState","prepareTodos","setPrepareTodos","todosForRand","setTodosForRand","filterByString","setFilterByString","filterByComplete","setFilterByComplete","isRandom","setIsRandom","getAllTodos","allTodosFromServer","filteringTodos","filter","todo","index","toDos","length","userId","title","useEffect","completeStatusForFiltered","includes","completed","filterHandler","i","j","Math","floor","random","shuffleArray","className","value","onChange","event","target","defaultValue","onClick","prev","map","classNames","defaultChecked","checked","readOnly","CurrentUser","email","phone","user","setUser","getUserInfo","userInfo","App","ReactDOM","render","document","getElementById"],"mappings":"8WAGMA,EAA0B,CAC9BC,eAAgB,EAChBC,MAAO,IAGHC,EAAY,YACZC,EAAsB,sBAefC,EAAmB,SAACC,GAAD,OAAsBA,EAAMJ,OAE/CK,EAA0B,SAACD,GAAD,OAAsBA,EAAML,gBAKtDO,EAAkB,SAACC,GAAD,MAAiB,CAAEC,KAAMN,EAAqBO,QAASF,IAEzEG,EAAQC,8BAtBL,WAA8C,IAA7CP,EAA4C,uDAApCN,EAAcc,EAAsB,uCAC3D,OAAQA,EAAOJ,MACb,KAAKP,EACH,OAAO,2BAAKG,GAAZ,IAAmBJ,MAAOY,EAAOH,UAEnC,KAAKP,EACH,OAAO,2BAAKE,GAAZ,IAAmBL,eAAgBa,EAAOH,UAE5C,QAAS,OAAOL,KAcsBS,iCCjCpCC,EAAU,qCAEHC,EAAW,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,6DAAqBV,EAArB,+BAA0B,GAA1B,SACFW,MAAM,GAAD,OAAIJ,GAAJ,OAAcE,GAAd,OAAqBT,IADxB,cACnBY,EADmB,yBAGlBA,EAASC,QAHS,2CAAH,sD,OCOXC,EAAqB,WAChC,IAAMrB,EAAQsB,YAAYnB,GACpBoB,EAAaD,YAAYjB,GACzBmB,EAAWC,cAEjB,EAAwCC,mBAAiB1B,GAAzD,mBAAO2B,EAAP,KAAqBC,EAArB,KACA,EAAwCF,mBAAiB,IAAzD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA4CJ,mBAAS,IAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAgDN,mBAAS,OAAzD,mBAAOO,EAAP,KAAyBC,EAAzB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KAEMC,EAAW,uCAAG,8BAAApB,EAAA,sEACeF,EAAY,SAD3B,OACZuB,EADY,OAGZC,EAAiBD,EACpBE,QAAO,SAACC,EAAYC,EAAeC,GAClC,QACED,EAAQC,EAAMC,OAAS,IACnBH,EAAKI,SAAWF,EAAMD,EAAQ,GAAGG,QAClCJ,EAAKK,QAAUH,EAAMD,EAAQ,GAAGI,SAKzCtB,EFJ0C,CAAEhB,KAAMP,EAAWQ,QEI3C8B,IAbA,2CAAH,qDAgBjBQ,qBAAU,WACRV,MACC,IAEHU,qBAAU,WACRnB,EAAgB5B,KACf,CAACA,IAgDJ,OAjBA+C,qBAAU,WAGR,OAhCoB,WACpB,IAAIC,EAEJ,OAAQf,GACN,IAAK,cAAee,GAA4B,EAC9C,MACF,IAAK,WAAYA,GAA4B,EAC3C,MACF,QAASA,EAA4B,MAGvCpB,EACE5B,GACGA,EAAMwC,QAAO,SAACC,GACf,OAAOA,EAAKK,MAAMG,SAASlB,IACxBU,EAAKS,YAAcF,MAe1BG,GAEQ,kBAAMrB,EAAgB,YAAIH,OAEjC,CAACI,EAAgBE,IAEpBc,qBAAU,WACRjB,EAAgB,YAAIH,IAEhBQ,EAnBe,WAEnB,IAAK,IAAIiB,EAAIzB,EAAaiB,OAAS,EAAGQ,EAAI,EAAGA,IAAK,CAChD,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADM,EAGX,CAACzB,EAAa0B,GAAI1B,EAAayB,IAAnEzB,EAAayB,GAHkC,KAG9BzB,EAAa0B,GAHiB,MAkBhDI,GAEA7B,EAAgB,YAAIC,MAErB,CAACM,IAGF,sBAAKuB,UAAU,WAAf,UACE,wCAEA,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,wCACA,uBACE,UAAQ,gBACRlD,KAAK,OACLmD,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OAAW7B,EAAkB6B,EAAMC,OAAOH,aAGxD,sBAAKD,UAAU,kBAAf,UACE,wCACA,yBACE1C,KAAK,SACL+C,aAAa,MACbH,SAAU,SAACC,GAAD,OAAW3B,EAAoB2B,EAAMC,OAAOH,QAHxD,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,cAAd,2BACA,wBAAQA,MAAM,WAAd,4BAGJ,sBAAKD,UAAU,kBAAf,UACE,6CACA,wBACElD,KAAK,SACLwD,QAAS,kBAAM5B,GAAY,SAAA6B,GAAI,OAAKA,MAFtC,kCASJ,qBAAKP,UAAU,2BAAf,SACE,qBAAIA,UAAU,iBAAiB,UAAQ,cAAvC,UACG/B,EAAauC,KAAI,SAACzB,GAAD,OAChB,qBAEEiB,UAAWS,IAAW,iBAAkB,CACtC,6BAA8B1B,EAAKS,UACnC,0BAA2BT,EAAKS,YAJpC,UAOE,kCACE,uBACE1C,KAAK,WACL4D,eAAgB3B,EAAKS,YAEvB,4BAAIT,EAAKK,WAGX,yBACE,UAAQ,aACRkB,QAAS,kBAAMxC,EAASlB,EAAgBmC,EAAKI,UAC7Ca,UAAWS,IAAW,wBAAyB,SAAU,CACvD,kCAAmC1B,EAAKI,SAAWtB,IAErDf,KAAK,SANP,sBASGiC,EAAKI,YAvBHJ,EAAKlC,OA4Bd,qBAAImD,UAAU,yCAAd,UACE,kCACE,uBAAOlD,KAAK,WAAW6D,SAAO,EAACC,UAAQ,IACvC,iFAGF,wBACEZ,UAAU,+BACVlD,KAAK,SAFP,oCC/JC+D,G,MAAwB,WACnC,MAAwB7C,mBAAe,CAAEV,KAAM,GAAIwD,MAAO,GAAIC,MAAO,KAArE,mBAAOC,EAAP,KAAaC,EAAb,KAEM9B,EAASvB,YAAYjB,GACrBmB,EAAWC,cAEXmD,EAAW,uCAAG,4BAAA3D,EAAA,sEACKF,EAAY,SAAD,OAAU8B,IAD1B,OACZgC,EADY,OAGlBF,EAAQE,GAHU,2CAAH,qDAUjB,OAJA9B,qBAAU,WACR6B,MACC,CAAC/B,IAGF,sBAAKa,UAAU,cAAf,UACE,qBAAIA,UAAU,qBAAd,UACE,wBACEA,UAAU,6BACVlD,KAAK,SACLwD,QAAS,kBAAMxC,EAASlB,EAAgB,KAH1C,yBAOA,kDAEG,IACAuC,QAIL,oBAAIa,UAAU,oBAAoB,UAAQ,WAA1C,SAAsDgB,EAAK1D,OAC3D,mBAAG0C,UAAU,qBAAb,SAAmCgB,EAAKF,QACxC,mBAAGd,UAAU,qBAAb,SAAmCgB,EAAKD,aCT/BK,EAxBO,WAKpB,IAAMvD,EAAaD,YAAYjB,GAE/B,OACE,sBAAKqD,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGnC,EACC,cAAC,EAAD,IACE,2BCpBdwD,IAASC,OACP,cAAC,IAAD,CAAUtE,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFuE,SAASC,eAAe,W","file":"static/js/main.f02c12d3.chunk.js","sourcesContent":["import { legacy_createStore as createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst defaultState: RootState = {\n  selectedUserId: 0,\n  todos: [],\n};\n\nconst GET_TODOS = 'GET_TODOS';\nconst SET_SELECTED_USERID = 'SET_SELECTED_USERID';\n\nconst reducer = (state = defaultState, action: AnyAction) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return { ...state, todos: action.payload };\n\n    case SET_SELECTED_USERID:\n      return { ...state, selectedUserId: action.payload };\n\n    default: return state;\n  }\n};\n\n// Selectors\nexport const getTodosSelector = (state: RootState) => state.todos;\n// eslint-disable-next-line max-len\nexport const getSelectUserIdSelector = (state: RootState) => state.selectedUserId;\n\n// Creators\nexport const getTodos = (payload: Todo[]) => ({ type: GET_TODOS, payload });\n// eslint-disable-next-line max-len\nexport const setSelectUserId = (id: number) => ({ type: SET_SELECTED_USERID, payload: id });\n\nexport const store = createStore(reducer, composeWithDevTools());\n","const mateApi = 'https://mate.academy/students-api/';\n\nexport const GetEndpoint = async (name: string, id = '') => {\n  const responce = await fetch(`${mateApi}${name}${id}`);\n\n  return responce.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getTodosSelector, setSelectUserId, getSelectUserIdSelector, getTodos,\n} from '../../store';\nimport { GetEndpoint } from '../../api';\n\nexport const TodoList: React.FC = () => {\n  const todos = useSelector(getTodosSelector);\n  const selectUsId = useSelector(getSelectUserIdSelector);\n  const dispatch = useDispatch();\n\n  const [prepareTodos, setPrepareTodos] = useState<Todo[]>(todos);\n  const [todosForRand, setTodosForRand] = useState<Todo[]>([]);\n  const [filterByString, setFilterByString] = useState('');\n  const [filterByComplete, setFilterByComplete] = useState('all');\n  const [isRandom, setIsRandom] = useState(false);\n\n  const getAllTodos = async () => {\n    const allTodosFromServer = await GetEndpoint('todos');\n\n    const filteringTodos = allTodosFromServer\n      .filter((todo: Todo, index: number, toDos: Todo[]) => {\n        return (\n          index < toDos.length - 1\n            ? todo.userId !== toDos[index + 1].userId\n          && todo.title !== toDos[index + 1].title\n            : true\n        );\n      });\n\n    dispatch(getTodos(filteringTodos));\n  };\n\n  useEffect(() => {\n    getAllTodos();\n  }, []);\n\n  useEffect(() => {\n    setPrepareTodos(todos);\n  }, [todos]);\n\n  const filterHandler = () => {\n    let completeStatusForFiltered: boolean | string;\n\n    switch (filterByComplete) {\n      case 'notComplete': completeStatusForFiltered = true;\n        break;\n      case 'complete': completeStatusForFiltered = false;\n        break;\n      default: completeStatusForFiltered = 'all';\n    }\n\n    setPrepareTodos(\n      todos\n      && todos.filter((todo) => {\n        return todo.title.includes(filterByString)\n        && todo.completed !== completeStatusForFiltered;\n      }),\n    );\n  };\n\n  const shuffleArray = () => {\n    // eslint-disable-next-line no-plusplus\n    for (let i = prepareTodos.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [prepareTodos[i], prepareTodos[j]] = [prepareTodos[j], prepareTodos[i]];\n    }\n  };\n\n  useEffect(() => {\n    filterHandler();\n\n    return (() => setTodosForRand([...prepareTodos])\n    );\n  }, [filterByString, filterByComplete]);\n\n  useEffect(() => {\n    setTodosForRand([...prepareTodos]);\n\n    if (isRandom) {\n      shuffleArray();\n    } else {\n      setPrepareTodos([...todosForRand]);\n    }\n  }, [isRandom]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"actions\">\n        <div className=\"actions__filter\">\n          <h3>Filter</h3>\n          <input\n            data-cy=\"filterByTitle\"\n            type=\"text\"\n            value={filterByString}\n            onChange={(event) => setFilterByString(event.target.value)}\n          />\n        </div>\n        <div className=\"actions__select\">\n          <h3>Select</h3>\n          <select\n            name=\"select\"\n            defaultValue=\"all\"\n            onChange={(event) => setFilterByComplete(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"notComplete\"> Not complete</option>\n            <option value=\"complete\">Complete</option>\n          </select>\n        </div>\n        <div className=\"actions__select\">\n          <h3>Random list</h3>\n          <button\n            type=\"button\"\n            onClick={() => setIsRandom(prev => !prev)}\n          >\n            Random/Default\n          </button>\n        </div>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {prepareTodos.map((todo: Todo) => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                data-cy=\"userButton\"\n                onClick={() => dispatch(setSelectUserId(todo.userId))}\n                className={classNames('TodoList__user-button', 'button', {\n                  'TodoList__user-button--selected': todo.userId === selectUsId,\n                })}\n                type=\"button\"\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n\n          <li className=\"TodoList__item TodoList__item--checked\">\n            <label>\n              <input type=\"checkbox\" checked readOnly />\n              <p>distinctio vitae autem nihil ut molestias quo</p>\n            </label>\n\n            <button\n              className=\"TodoList__user-button button\"\n              type=\"button\"\n            >\n              User&nbsp;#2\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GetEndpoint } from '../../api';\nimport { getSelectUserIdSelector, setSelectUserId } from '../../store';\n\nexport const CurrentUser: React.FC = () => {\n  const [user, setUser] = useState<User>({ name: '', email: '', phone: '' });\n\n  const userId = useSelector(getSelectUserIdSelector);\n  const dispatch = useDispatch();\n\n  const getUserInfo = async () => {\n    const userInfo = await GetEndpoint(`users/${userId}`);\n\n    setUser(userInfo);\n  };\n\n  useEffect(() => {\n    getUserInfo();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <button\n          className=\"CurrentUser__button button\"\n          type=\"button\"\n          onClick={() => dispatch(setSelectUserId(0))}\n        >\n          Reset Users\n        </button>\n        <span>\n          Selected user:\n          {' '}\n          {userId}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","// import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getSelectUserIdSelector } from './store';\n\nconst App: React.FC = () => {\n  // const [\n  //   selectedUserId,\n  //   setSelectedUserId,\n  // ] = useState(0);\n  const selectUsId = useSelector(getSelectUserIdSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectUsId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}